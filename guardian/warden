#!/bin/bash
# Project Warden CLI - Repository Quality Management Tool

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

print_header() {
    echo -e "${BLUE}"
    echo "╭─────────────────────────────────────────────╮"
    echo "│             Project Warden                 │"
    echo "│      Repository Quality Management          │"
    echo "╰─────────────────────────────────────────────╯"
    echo -e "${NC}"
}

show_help() {
    print_header
    echo "Usage: warden [COMMAND] [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "  check              Run all policy checks"
    echo "  scan               Scan for security issues and secrets"
    echo "  size               Check PR size and complexity"
    echo "  test               Validate test coverage requirements"
    echo "  format             Check commit message format"
    echo "  status             Show repository compliance status"
    echo "  help               Show this help message"
    echo ""
    echo "OPTIONS:"
    echo "  --fix              Attempt to fix violations automatically"
    echo "  --policy FILE      Use custom policy file (default: policy.yml)"
    echo "  --verbose          Show detailed output"
    echo ""
    echo "EXAMPLES:"
    echo "  warden check                 # Run all policy checks"
    echo "  warden scan --fix           # Scan and fix security issues"
    echo "  warden size --verbose       # Check PR size with details"
    echo ""
}

check_dependencies() {
    local missing=()
    
    if ! command -v python3 &> /dev/null; then
        missing+=("python3")
    fi
    
    if ! python3 -c "import yaml" &> /dev/null; then
        missing+=("python3-yaml")
    fi
    
    if ! command -v git &> /dev/null; then
        missing+=("git")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}❌ Missing dependencies: ${missing[*]}${NC}"
        echo "Install missing dependencies and try again."
        exit 1
    fi
}

run_policy_check() {
    local policy_file="${1:-policy.yml}"
    local fix_flag="$2"
    
    echo -e "${BLUE}🛡️  Running Project Warden policy checks...${NC}"
    
    cd "$PROJECT_ROOT"
    
    if [ ! -f "$policy_file" ]; then
        echo -e "${RED}❌ Policy file not found: $policy_file${NC}"
        exit 1
    fi
    
    local cmd="python3 guardian/guardian.py --policy $policy_file"
    if [ "$fix_flag" = "--fix" ]; then
        cmd="$cmd --fix"
    fi
    
    if $cmd; then
        echo -e "${GREEN}✅ All policy checks passed!${NC}"
        return 0
    else
        echo -e "${RED}❌ Policy violations found.${NC}"
        return 1
    fi
}

check_pr_size() {
    echo -e "${BLUE}📏 Checking PR size...${NC}"
    
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
        echo -e "${RED}❌ Not in a git repository${NC}"
        return 1
    fi
    
    # Check if main branch exists
    if ! git show-ref --quiet refs/remotes/origin/main; then
        echo -e "${YELLOW}⚠️  Origin/main not found, skipping PR size check${NC}"
        return 0
    fi
    
    local diff_stats
    diff_stats=$(git diff --stat origin/main...HEAD 2>/dev/null || echo "")
    
    if [ -z "$diff_stats" ]; then
        echo -e "${GREEN}✅ No changes detected${NC}"
        return 0
    fi
    
    # Parse diff stats
    local summary_line
    summary_line=$(echo "$diff_stats" | tail -n 1)
    
    if [[ $summary_line =~ ([0-9]+).*insertion.*([0-9]+).*deletion ]]; then
        local insertions=${BASH_REMATCH[1]:-0}
        local deletions=${BASH_REMATCH[2]:-0}
        local total=$((insertions + deletions))
        
        echo "  Insertions: $insertions"
        echo "  Deletions: $deletions"
        echo "  Total changes: $total"
        
        if [ $total -gt 300 ]; then
            echo -e "${RED}❌ PR too large: $total lines (max: 300)${NC}"
            echo "  Consider splitting into smaller PRs"
            return 1
        elif [ $total -gt 200 ]; then
            echo -e "${YELLOW}⚠️  PR size warning: $total lines (recommended max: 200)${NC}"
        else
            echo -e "${GREEN}✅ PR size acceptable${NC}"
        fi
    fi
    
    return 0
}

show_status() {
    print_header
    echo -e "${BLUE}📊 Repository Compliance Status${NC}"
    echo ""
    
    # Check if we're in a git repo
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
        echo -e "${RED}❌ Not in a git repository${NC}"
        return 1
    fi
    
    # Basic repo info
    echo "Repository: $(basename "$PWD")"
    echo "Branch: $(git branch --show-current)"
    echo "Last commit: $(git log -1 --format='%h %s' 2>/dev/null || echo 'None')"
    echo ""
    
    # Policy file check
    if [ -f "policy.yml" ]; then
        echo -e "${GREEN}✅ Policy file found${NC}"
    else
        echo -e "${RED}❌ Policy file missing${NC}"
    fi
    
    # Run quick checks
    echo ""
    echo -e "${BLUE}Quick Checks:${NC}"
    
    # Check PR size
    if check_pr_size >/dev/null 2>&1; then
        echo -e "${GREEN}✅ PR size compliant${NC}"
    else
        echo -e "${RED}❌ PR size violations${NC}"
    fi
    
    # Check for common issues
    if git status --porcelain | grep -q "^??.*\\.env$"; then
        echo -e "${RED}❌ Untracked .env file detected${NC}"
    else
        echo -e "${GREEN}✅ No .env files in working tree${NC}"
    fi
    
    echo ""
    echo "Run 'warden check' for comprehensive policy validation."
}

main() {
    local command="${1:-help}"
    local policy_file="policy.yml"
    local fix_flag=""
    local verbose=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --policy)
                policy_file="$2"
                shift 2
                ;;
            --fix)
                fix_flag="--fix"
                shift
                ;;
            --verbose)
                verbose=true
                shift
                ;;
            -h|--help|help)
                show_help
                exit 0
                ;;
            check|scan|size|test|format|status)
                command="$1"
                shift
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check dependencies
    check_dependencies
    
    case $command in
        check)
            run_policy_check "$policy_file" "$fix_flag"
            ;;
        scan)
            echo -e "${BLUE}🔍 Scanning for security issues...${NC}"
            run_policy_check "$policy_file" "$fix_flag"
            ;;
        size)
            check_pr_size
            ;;
        test)
            echo -e "${BLUE}🧪 Checking test coverage...${NC}"
            cd "$PROJECT_ROOT"
            npm test -- --coverage --passWithNoTests 2>/dev/null || echo -e "${YELLOW}⚠️  Test coverage check requires npm test setup${NC}"
            ;;
        format)
            echo -e "${BLUE}📝 Checking commit message format...${NC}"
            run_policy_check "$policy_file" "$fix_flag"
            ;;
        status)
            show_status
            ;;
        *)
            show_help
            exit 1
            ;;
    esac
}

main "$@"