"""Initial schema with all models

Revision ID: 74cc5067db43
Revises: 
Create Date: 2025-08-31 21:14:19.883138

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '74cc5067db43'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'SOLICITOR', 'PARALEGAL', 'CLIENT', 'VIEWER', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('mfa_enabled', sa.Boolean(), nullable=False),
    sa.Column('mfa_secret', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.Column('method', sa.String(length=10), nullable=True),
    sa.Column('path', sa.String(length=500), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('is_redacted', sa.Boolean(), nullable=False),
    sa.Column('risk_level', sa.String(length=20), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('request_id', sa.String(length=100), nullable=True),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['users.id'], name=op.f('fk_audit_logs_actor_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.create_table('cases',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('client_name', sa.String(length=255), nullable=False),
    sa.Column('client_email', sa.String(length=255), nullable=True),
    sa.Column('client_phone', sa.String(length=50), nullable=True),
    sa.Column('status', sa.Enum('INTAKE', 'INVESTIGATION', 'PRE_ACTION', 'LITIGATION', 'SETTLEMENT', 'CLOSED', 'ARCHIVED', name='casestatus'), nullable=False),
    sa.Column('sensitivity_level', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='sensitivitylevel'), nullable=False),
    sa.Column('case_type', sa.String(length=100), nullable=True),
    sa.Column('opposing_party', sa.String(length=500), nullable=True),
    sa.Column('opposing_solicitor', sa.String(length=500), nullable=True),
    sa.Column('incident_date', sa.DateTime(), nullable=True),
    sa.Column('limitation_date', sa.DateTime(), nullable=True),
    sa.Column('next_action_date', sa.DateTime(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('estimated_value', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('closed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_cases_owner_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cases'))
    )
    op.create_index(op.f('ix_cases_reference'), 'cases', ['reference'], unique=True)
    op.create_table('documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('document_type', sa.String(length=100), nullable=True),
    sa.Column('document_date', sa.DateTime(), nullable=True),
    sa.Column('ocr_completed', sa.Boolean(), nullable=False),
    sa.Column('ocr_text', sa.Text(), nullable=True),
    sa.Column('page_count', sa.Integer(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=False),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('chunks_generated', sa.Integer(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('uploaded_by_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name=op.f('fk_documents_case_id_cases')),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], name=op.f('fk_documents_uploaded_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_documents'))
    )
    op.create_index(op.f('ix_documents_file_hash'), 'documents', ['file_hash'], unique=False)
    op.create_table('drafts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('draft_type', sa.Enum('LETTER', 'EMAIL', 'COMPLAINT', 'SAR', 'PRE_ACTION', 'COURT_FORM', 'WITNESS_STATEMENT', 'REPORT', name='drafttype'), nullable=False),
    sa.Column('status', sa.Enum('GENERATED', 'REVIEWING', 'APPROVED', 'SENT', 'ARCHIVED', name='draftstatus'), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('recipient_name', sa.String(length=500), nullable=True),
    sa.Column('recipient_address', sa.Text(), nullable=True),
    sa.Column('recipient_email', sa.String(length=255), nullable=True),
    sa.Column('tone', sa.Enum('GENTLE', 'NEUTRAL', 'ASSERTIVE', 'FIRM', 'ESCALATED', name='tonelevel'), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('prompt_used', sa.Text(), nullable=True),
    sa.Column('model_used', sa.String(length=100), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name=op.f('fk_drafts_case_id_cases')),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('fk_drafts_created_by_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_drafts'))
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ASSISTANT', 'SYSTEM', 'TOOL', name='messagerole'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('tool_calls', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tool_responses', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('context_chunks', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('citations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('model_used', sa.String(length=100), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_messages_author_id_users')),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name=op.f('fk_messages_case_id_cases')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=True),
    sa.Column('task_type', sa.Enum('OCR', 'CHUNK_DOCUMENT', 'GENERATE_EMBEDDINGS', 'GENERATE_DRAFT', 'SEND_EMAIL', 'EXPORT_DOCUMENT', 'REDACT_DOCUMENT', name='tasktype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('progress', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(length=500), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('worker_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('scheduled_for', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name=op.f('fk_tasks_case_id_cases')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_table('document_chunks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('tokens', sa.Integer(), nullable=False),
    sa.Column('page_number', sa.Integer(), nullable=True),
    sa.Column('page_start', sa.Integer(), nullable=True),
    sa.Column('page_end', sa.Integer(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=384), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('heading', sa.String(length=500), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('fk_document_chunks_document_id_documents')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_document_chunks'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('document_chunks')
    op.drop_table('tasks')
    op.drop_table('messages')
    op.drop_table('drafts')
    op.drop_index(op.f('ix_documents_file_hash'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_cases_reference'), table_name='cases')
    op.drop_table('cases')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
