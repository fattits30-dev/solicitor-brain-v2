name: MCP Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/src/contexts/**'
      - 'client/src/hooks/**'
      - 'client/src/types/**'
      - 'tests/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'client/src/contexts/**'
      - 'client/src/hooks/**'
      - 'client/src/types/**'
      - 'tests/**'
      - 'package.json'
      - 'package-lock.json'
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
      browser:
        description: 'Browser for E2E tests'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit

env:
  NODE_VERSION: '18'
  CI: true
  NODE_ENV: test

jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit'
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage --watchAll=false --ci
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results/unit
          JEST_JUNIT_OUTPUT_NAME: results.xml

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: |
            ./test-results/unit/
            ./coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379

      - name: Start test server
        run: |
          npm run server:test &
          npx wait-on http://localhost:3001/api/health --timeout 30000
        env:
          PORT: 3001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          ENABLE_AI_FEATURES: false

      - name: Run integration tests
        run: |
          npm run test:integration -- --ci
        env:
          TEST_BASE_URL: http://localhost:3001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            ./test-results/integration/
            ./logs/
          retention-days: 30

      - name: Upload test logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: integration-test-logs
          path: |
            ./logs/
            ./server-logs/
          retention-days: 7

  # E2E Tests Job
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/3, 2/3, 3/3]
        exclude:
          # Only run webkit on scheduled runs to save resources
          - browser: webkit
          # Only run all browsers on nightly or manual dispatch
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379

      - name: Build application
        run: |
          npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: http://localhost:3001

      - name: Start application
        run: |
          npm run start:test &
          npx wait-on http://localhost:3001 --timeout 60000
        env:
          PORT: 3001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          ENABLE_AI_FEATURES: true
          OLLAMA_URL: http://localhost:11434

      - name: Run E2E tests
        run: |
          npm run test:e2e -- --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        env:
          BROWSER: ${{ github.event.inputs.browser || matrix.browser }}
          CI: true
          PWTEST_SKIP_TEST_OUTPUT: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            ./test-results/
            ./playwright-report/
          retention-days: 30

      - name: Upload E2E screenshots and videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            ./test-results/
            ./screenshots/
            ./videos/
          retention-days: 7

  # Performance Tests Job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared

      - name: Setup test database with large dataset
        run: |
          npm run db:migrate:test
          npm run db:seed:performance
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test

      - name: Run performance tests
        run: |
          npm run test:performance
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            ./performance-results/
            ./benchmarks/
          retention-days: 30

  # Security Tests Job
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npm run audit:security

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'solicitor-brain-v2'
          path: '.'
          format: 'ALL'

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            ./reports/
            ./security-audit/
          retention-days: 30

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./all-test-results

      - name: Generate test summary
        run: |
          echo "# MCP Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          UNIT_TESTS=$(find ./all-test-results -name "*unit*" -type f | wc -l)
          INTEGRATION_TESTS=$(find ./all-test-results -name "*integration*" -type f | wc -l)
          E2E_TESTS=$(find ./all-test-results -name "*e2e*" -type f | wc -l)
          
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Test Files: $UNIT_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Test Files: $INTEGRATION_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Test Files: $E2E_TESTS" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const unitResult = '${{ needs.unit-tests.result }}';
            const integrationResult = '${{ needs.integration-tests.result }}';
            const e2eResult = '${{ needs.e2e-tests.result }}';
            
            const getStatusEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏸️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const body = `## 🧪 MCP Test Results
            
            | Test Type | Status |
            |-----------|--------|
            | Unit Tests | ${getStatusEmoji(unitResult)} ${unitResult} |
            | Integration Tests | ${getStatusEmoji(integrationResult)} ${integrationResult} |
            | E2E Tests | ${getStatusEmoji(e2eResult)} ${e2eResult} |
            
            ### Test Coverage
            - **MCP Contexts**: Unit tests for all context providers
            - **Hooks Integration**: Authentication and real-time updates
            - **E2E Workflows**: Complete legal case workflows
            - **Error Handling**: Network failures and recovery
            
            ${unitResult === 'success' && integrationResult === 'success' && e2eResult === 'success' 
              ? '🎉 All MCP tests passed! Ready for merge.' 
              : '⚠️ Some tests failed. Please review the results.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Nightly E2E with Warden Integration
  nightly-e2e:
    name: Nightly E2E Tests (Warden)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      # Mock Ollama service for AI testing
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        volumes:
          - /tmp/ollama:/root/.ollama

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build:shared

      - name: Install all Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup production-like environment
        run: |
          npm run db:migrate:test
          npm run db:seed:production-like
          docker-compose -f docker-compose.test.yml up -d
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test
          REDIS_URL: redis://localhost:6379

      - name: Warm up Ollama models
        run: |
          curl -X POST http://localhost:11434/api/pull -d '{"name":"llama3.1:8b"}'
          sleep 30

      - name: Run comprehensive E2E test suite
        run: |
          npm run test:e2e:nightly
        env:
          BROWSER: all
          HEADLESS: true
          ENABLE_AI_FEATURES: true
          OLLAMA_URL: http://localhost:11434
          TEST_TIMEOUT: 120000

      - name: Generate Warden report
        run: |
          npm run generate:warden-report
        env:
          WARDEN_API_KEY: ${{ secrets.WARDEN_API_KEY }}
          BUILD_ID: ${{ github.run_id }}
          COMMIT_SHA: ${{ github.sha }}

      - name: Upload nightly test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-e2e-results
          path: |
            ./test-results/
            ./playwright-report/
            ./warden-report/
            ./screenshots/
            ./videos/
          retention-days: 90

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { SLACK_WEBHOOK_URL } = process.env;
            if (SLACK_WEBHOOK_URL) {
              const message = {
                text: `🚨 Nightly E2E Tests Failed`,
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: `*Nightly E2E Tests Failed* 🚨\n\nCommit: ${context.sha.substring(0, 7)}\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`
                    }
                  },
                  {
                    type: "actions",
                    elements: [
                      {
                        type: "button",
                        text: {
                          type: "plain_text",
                          text: "View Results"
                        },
                        url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
                      }
                    ]
                  }
                ]
              };
              
              await fetch(SLACK_WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(message)
              });
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}