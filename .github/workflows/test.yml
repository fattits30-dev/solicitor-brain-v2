name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/solicitor_brain_test

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run check

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Setup test database
        run: |
          createdb -h localhost -U postgres solicitor_brain_test
          psql -h localhost -U postgres -d solicitor_brain_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: postgres

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          createdb -h localhost -U postgres solicitor_brain_test
          psql -h localhost -U postgres -d solicitor_brain_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: postgres

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run integration tests
        run: npm run test -- --testPathPattern=integration
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          createdb -h localhost -U postgres solicitor_brain_test
          psql -h localhost -U postgres -d solicitor_brain_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: postgres

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test
          E2E_BASE_URL: http://localhost:5173

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          createdb -h localhost -U postgres solicitor_brain_test
          psql -h localhost -U postgres -d solicitor_brain_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: postgres

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: k6 run tests/performance/load-test.js

  nightly-e2e:
    name: Nightly E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: solicitor_brain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        run: |
          createdb -h localhost -U postgres solicitor_brain_test
          psql -h localhost -U postgres -d solicitor_brain_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: postgres

      - name: Build application
        run: npm run build

      - name: Run E2E tests on ${{ matrix.browser }}
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  report-status:
    name: Test Status Report
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Generate test report
        run: |
          echo "## Test Suite Results" > test-report.md
          echo "| Test Type | Status |" >> test-report.md
          echo "|-----------|--------|" >> test-report.md
          echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result }} |" >> test-report.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-report.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-report.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-report.md
          
          if [[ "${{ needs.lint-and-typecheck.result }}" == "failure" || "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "❌ Some tests failed. Please check the individual job logs for details." >> test-report.md
            exit 1
          else
            echo "✅ All tests passed successfully!" >> test-report.md
          fi

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Cleanup artifacts older than 30 days
        run: |
          echo "Cleanup job completed - artifacts will be automatically removed based on retention policies"